class r{constructor(t,e){this.body=[],this.body.push(t.createVector(0,0)),this.N=e}update(t,e,i){if(this.dead)return;let s;if(e==t.LEFT_ARROW?s=t.createVector(this.body[0].x-1,this.body[0].y):e==t.RIGHT_ARROW?s=t.createVector(this.body[0].x+1,this.body[0].y):e==t.UP_ARROW?s=t.createVector(this.body[0].x,this.body[0].y-1):e==t.DOWN_ARROW&&(s=t.createVector(this.body[0].x,this.body[0].y+1)),s){(s.x<0||s.x>=this.N||s.y<0||s.y>=this.N)&&(this.dead=!0);for(let o of this.body)o.equals(s)&&(this.dead=!0);if(!this.dead)if(this.body.unshift(s),!s.equals(i))this.body.pop();else return!0}}display(t){const e=t.width/this.N,i=t.height/this.N;t.fill(245);for(let s of this.body)t.rect(s.x*e+1,s.y*i+1,e-2,i-2)}}class l{constructor(t,e){this.N=e,this.snake=new r(t,e),this.setNewFood(t)}update(t,e){if(this.snake.update(t,e,this.food))this.setNewFood(t);else if(this.snake.dead)return this.snake=new r(t,this.N),this.setNewFood(t),!0}isFoodValid(){for(let t of this.snake.body)if(t.equals(this.food))return!1;return!0}setNewFood(t){for(this.food=t.createVector(Math.floor(t.random(0,this.N)),Math.floor(t.random(0,this.N)));!this.isFoodValid();)this.food=t.createVector(Math.floor(t.random(0,this.N)),Math.floor(t.random(0,this.N)))}display(t){t.noFill();const e=t.width/this.N,i=t.height/this.N;for(let s=0;s<t.width;s+=e)for(let o=0;o<t.height;o+=i)t.rect(s+2,o+2,e-4,i-4);t.fill(245,108,108),t.rect(this.food.x*e+1,this.food.y*i+1,e-2,i-2),this.snake.display(t)}}let d,h;function f(){this.createCanvas(400,400),this.rectMode(this.CORNER),h=null,d=new l(this,30),this.frameRate(7),this.stroke(100)}function c(){h=this.keyCode}function n(){this.background(40),d.update(this,h)&&(h=null),d.display(this)}export{n as draw,c as keyPressed,f as setup};
